////////////////////////////////////////////////////////////////////////////////
//
// Urho3D project wizard
//
////////////////////////////////////////////////////////////////////////////////

// globals
UrhoPath <- _T("");
TemplateFilePath <- _T("");
GraphicAPIType <- _T("");
ProjectGraphicAPI <- 0;
BuildArch <- 0;

function BeginWizard()
{
    local intro_msg = _T("Welcome to the Urho3D project wizard!\n\n" +
                         "This wizard will guide you to create a new project\n" +
                         "using the Urho3D real-time engine.\n\n" +
                         "When you're ready to proceed, please click \"Next\"...");

    local urhopath_descr = _T("Please select the location of Urho3D on your computer.\n" +
                             "This is the top-level folder where Urho3D was installed (unpacked).\n" +
                             "To help you, this folder must contain the subfolders\n" +
                             "\"include\" and \"lib\".");

	local msg_descr  = _T("Select template type for the Urho3D project.\n" +
							"Either Navigation camera or Orbit camera.");

	local selection_choices = _T("Empty Project;Navigating Camera Project;Orbiting Camera Project");

    Wizard.AddInfoPage(_T("UrhoIntro"), intro_msg);
    Wizard.AddProjectPathPage();
    Wizard.AddGenericSelectPathPage(_T("Urho3DPathPage"), urhopath_descr, _T("Please select Urho3D's location:"), _T("${URHO3D}"));
	//Wizard.AddGenericSingleChoiceListPage(_T("UrhoProjectType"), msg_descr, selection_choices, 0 );
	Wizard.AddPage(_T("pnlProjectType"));
    Wizard.AddCompilerPage(_T(""), _T("*"), true, true);
}

////////////////////////////////////////////////////////////////////////////////
// Urho3D's path page
////////////////////////////////////////////////////////////////////////////////

function OnLeave_Urho3DPathPage(fwd)
{
     if (fwd)
    {
        local dir         = Wizard.GetTextControlValue(_T("txtFolder")); // txtFolder is the text control in GenericSelectPathPage
        local dir_nomacro = ReplaceMacros(dir, true);
        if (!IO.FileExists(dir_nomacro + _T("/include/Urho3D/Urho3D.h")))
        {
            ShowError(_T("The path you entered seems valid, but this wizard " +
                    "can't locate Urho3D's files in it..."));
            return false;
        }

        UrhoPath = dir;
    }
    return true;
}

function OnEnter_pnlProjectType(fwd)
{
   if (fwd)
    {
        ProjectGraphicAPI = ConfigManager.Read(_T("/urho3d_project_wizard/graphic_api"), 0);
		BuildArch = ConfigManager.Read(_T("/urho3d_project_wizard/build_arch"), 0);
        local selection = ConfigManager.Read(_T("/urho3d_project_wizard/code_template"), 0);
		
		Wizard.SetRadioboxSelection(_T("rbBuildArch"), BuildArch);
        Wizard.SetRadioboxSelection(_T("rbGraphics"), ProjectGraphicAPI);
        Wizard.SetRadioboxSelection(_T("rbTemplates"), selection);
    }
    return true;
}


function OnLeave_pnlProjectType(fwd)
{
	
	if (fwd)
    {
		BuildArch = Wizard.GetRadioboxSelection(_T("rbBuildArch"));
        ProjectGraphicAPI = Wizard.GetRadioboxSelection(_T("rbGraphics"));
        local selection = Wizard.GetRadioboxSelection(_T("rbTemplates"));
		
		if(selection == 1)
		{
			TemplateFilePath = _T("urho3d/navi_cam_project/");
		}
		else if(selection == 2)
		{
			TemplateFilePath = _T("urho3d/orbit_cam_project/");
		}
		else
		{
			TemplateFilePath = _T("urho3d/bare_project/");
		}
        
        GetConfigManager().Write(_T("/urho3d_project_wizard/build_arch"), BuildArch);
        GetConfigManager().Write(_T("/urho3d_project_wizard/graphic_api"), ProjectGraphicAPI);
        GetConfigManager().Write(_T("/urho3d_project_wizard/code_template"), selection);
    }
    return true;	
	
}

// -----------------------------------------------------------------------------
// each time, return a string of the form "filename.ext;contents"
// you can change the return string based on <file_index>
// return an empty string to denote that no more files are to be generated
function GetGeneratedFile(file_index)
{
	
	local prefix = Wizard.GetProjectName();
	
	if(TemplateFilePath == _T(""))
	{
		return _T("");
	}

    switch (file_index)
    {
        // header file
        case 0: return prefix + DOT_EXT_H + _T(";") + GenerateHeader();
        // source file
        case 1: return prefix + DOT_EXT_CPP + _T(";") + GenerateSource();
    }
    return _T(""); // no more generated files
}


// -----------------------------------------------------------------------------
// return the header contents string
function GenerateHeader()
{
    local path = Wizard.FindTemplateFile(GetTemplateFile(DOT_EXT_H));
    local buffer = IO.ReadFileContents(path);

    return SubstituteMacros(buffer);
}

// -----------------------------------------------------------------------------
// return the implementation contents string
function GenerateSource()
{
    local path = Wizard.FindTemplateFile(GetTemplateFile(DOT_EXT_CPP));
    local buffer = IO.ReadFileContents(path);

    return SubstituteMacros(buffer);
}

function SubstituteMacros(buffer)
{
    local Prefix = GetFixedProjectName(Wizard.GetProjectName());

    // macros substitution
    buffer.Replace(_T("[PROJECT_HDR]"), Prefix.Upper() );
    buffer.Replace(_T("[CLASS_PREFIX]"), Prefix);
    return buffer;
}

// return the template's filename, appending <dot_ext> as an extension (must include the dot)
function GetTemplateFile(dot_ext)
{
	return TemplateFilePath + _T("main") + dot_ext;
}


// setup the already created project
function SetupProject(project)
{
    //Set up specific target options
	local target = project.GetBuildTarget(Wizard.GetDebugName());
	if (!IsNull(target))
		SetupTarget(target, true);
	local target = project.GetBuildTarget(Wizard.GetReleaseName());
	if (!IsNull(target))
		SetupTarget(target, false);
	
	
    // set compiler/linker search paths
    project.AddIncludeDir(UrhoPath + _T("/include"));
	project.AddIncludeDir(UrhoPath + _T("/include/Urho3D/ThirdParty"));
	project.AddIncludeDir(UrhoPath + _T("/include/Urho3D/ThirdParty/Bullet"));

	project.AddLibDir(UrhoPath + _T("/lib"));

    if (PLATFORM == PLATFORM_MSW)
    {

		//add compiler options
		project.AddCompilerOption(_T("-mthreads"));
        project.AddCompilerOption(_T("-fmessage-length=0"));
        project.AddCompilerOption(_T("-fexceptions"));
        project.AddCompilerOption(_T("-fident"));
        project.AddCompilerOption(_T("-DWIN32"));
        project.AddCompilerOption(_T("-D_WINDOWS"));
		project.AddCompilerOption(_T("-DURHO3D_SSE"));
		project.AddCompilerOption(_T("-DURHO3D_FILEWATCHER"));
		project.AddCompilerOption(_T("-DURHO3D_PROFILING"));
		project.AddCompilerOption(_T("-DURHO3D_LOGGING"));
		project.AddCompilerOption(_T("-DURHO3D_ANGELSCRIPT"));
		project.AddCompilerOption(_T("-DURHO3D_STATIC_DEFINE"));
		project.AddCompilerOption(_T("-Wno-invalid-offsetof"));
		project.AddCompilerOption(_T("-ffast-math"));
		project.AddCompilerOption(_T("-std=gnu++11"));
		project.AddCompilerOption(_T("-msse3"));
		project.AddCompilerOption(_T("-static"));
		project.AddCompilerOption(_T("-static-libstdc++"));
		project.AddCompilerOption(_T("-static-libgcc"));
		
		
		//Specify the respective Urho3D lib build option (-m32 for x86 and -m64 for x64)
		if(BuildArch == 0) //If x86
		{
			project.AddCompilerOption(_T("-m32"));
		}
		else if(BuildArch == 0) //If x64
		{
			project.AddCompilerOption(_T("-m64"));
		}

    }

	// enable compiler warnings (project-wide)
    WarningsOn(project, Wizard.GetCompilerID());

    // enable C++ exceptions (project-wide)
    CppExceptionsOn(project, Wizard.GetCompilerID());
	
    // Release
    local target = project.GetBuildTarget(Wizard.GetReleaseName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttExecutable); // ttExecutable: no console
        target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        target.SetWorkingDir(UrhoPath + _T("/bin"));
        // enable optimizations for target
        OptimizationsOn(target, Wizard.GetCompilerID());
		
		target.AddCompilerOption(_T("-DNDEBUG"));
		
		//Add Approriate build type lib of Urho3D
			
    }
	
	//Debug
	local target = project.GetBuildTarget(Wizard.GetDebugName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttExecutable); // ttExecutable: no console
        target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() +_T("_d") + DOT_EXT_EXECUTABLE);
		target.SetWorkingDir(UrhoPath + _T("/bin"));
		DebugSymbolsOn(target, Wizard.GetCompilerID());
		
		target.AddCompilerOption(_T("-DDEBUG"));
		target.AddCompilerOption(_T("-D_DEBUG"));
	
	}

    return true;
}

function SetupTarget(target, is_debug)
{
    if (IsNull(target))
        return false;
	
	
	if(PLATFORM == PLATFORM_MSW)
	{
		if(is_debug)
		{
			target.AddLinkLib(_T("Urho3D_d"));
		}
		else
		{
			target.AddLinkLib(_T("Urho3D"));
		}
		
		target.AddLinkLib(_T("user32"));
		target.AddLinkLib(_T("gdi32"));
		target.AddLinkLib(_T("winmm"));
		target.AddLinkLib(_T("imm32"));
		target.AddLinkLib(_T("ole32"));
		target.AddLinkLib(_T("oleaut32"));
		target.AddLinkLib(_T("version"));
		target.AddLinkLib(_T("uuid"));
		target.AddLinkLib(_T("ws2_32"));
			
		//Specify the Graphic API lib to include
		if(ProjectGraphicAPI == 0) //If OpenGL
		{
			target.AddLinkLib(_T("opengl32"))
			target.AddCompilerOption(_T("-DURHO3D_OPENGL"));
		}
		else if(ProjectGraphicAPI == 1) //If Direct3D9
		{
			target.AddLinkLib(_T("d3d9"));
			target.AddLinkLib(_T("d3dcompiler"));
		}
		else if(ProjectGraphicAPI == 2) //If Direct3D9
		{
			target.AddCompilerOption(_T("-DURHO3D_D3D11"));
			
			target.AddLinkLib(_T("d3d11"));
			target.AddLinkLib(_T("d3dcompiler"));
			target.AddLinkLib(_T("dxgi"));
			target.AddLinkLib(_T("dxguid"));
		}
			
	}
	
	
	
	
	
}